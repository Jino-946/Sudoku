"
ニコリのサイトで紹介されている[数独のルールと解き方](https://www.nikoli.co.jp/ja/wp-content/uploads/2023/02/sd41_rule.pdf)を実装する基底クラス


Instance Variables
- sudokuBoard          <SudokuBoard> パズルを解く対象の数独ボード
- relatedVertBlocks    <Dictionary> 垂直方向で関連するブロック [1-4-7][2-5-8][3-6-9]
                                    ブロック番号をキーとし他の2のブロック番号の配列を値とするDictionary
- relatedHorBlocks     <Dictionary> 水平方向で関連するブロック [1-2-3][4-5-6][7-8-9]
                                    ブロック番号をキーとし他の2のブロック番号の配列を値とするDictionary

"
Class {
	#name : #NikoliWay,
	#superclass : #Object,
	#instVars : [
		'sudokuBoard',
		'relatedVertBlocks',
		'relatedHorBlocks'
	],
	#category : #'M946-Sudoku2-Solution'
}

{ #category : #'instance creation' }
NikoliWay class >> new: sudokuBoard [

	| way |
	way := self new.
	way sudokuBoard: sudokuBoard .
	^ way
]

{ #category : #exercises }
NikoliWay >> beginnersEx [

	^ #(
'
1	9	7		0	0	4		2	0	5	
6	8	0		5	3	0		9	0	0	
5	0	3		0	7	2		1	6	8	

0	6	0		4	0	9		7	0	2	
0	7	5		0	1	0		6	8	0	
2	0	9		8	0	7		0	4	0	

7	5	6		3	2	0		4	0	1	
0	0	1		0	4	5		0	2	6	
8	0	4		1	0	0		3	5	7	
'

'
9 0 6   8 2 4  3 5 0
0 1 2   0 3 0  0 0 6
5 0 3   9 6 0  2 8 7 

2 9 1  3 0 0  7 6 0
0 0 0  0 4 9  8 0 3
3 8 0  0 0 0  0 0 0

1 0 0  4 9 0  0 0 0
6 2 0  1 0 0  0 0 5
0 5 8  0 0 0  0 0 9
'

'
0 2 6  3 5 0  8 0 0
7 0 0  0 6 0  1 0 0
8 4 9  0 0 7  6 0 3

0 6 0  0 0 5  3 0 0
0 0 0  2 9 1  5 0 7
5 1 7  8 3 0  0 9 2

6 0 1  0 0 4  0 3 8
0 7 0  0 0 3  9 4 0
3 0 0  9 8 2  0 1 0
'

'
0 8 1  5 7 0  0 6 0
4 0 0  8 0 0  0 1 0
0 6 0  0 2 0  0 0 3

0 0 9  0 0 0  3 0 5
0 5 0  2 0 0  0 8 9
0 4 0  0 0 7  0 0 0

0 0 7  0 8 0  0 5 1
0 0 0  0 0 0  0 0 0
8 9 3  1 4 0  0 0 2
'

'
0 0 4  0 3 2  0 0 0
0 0 7  0 1 0  9 0 4
2 0 0  0 0 5  0 0 0

4 1 0  3 0 6  0 7 8
0 0 0  0 0 0  0 0 0
8 3 0  4 0 0  0 9 0

5 0 0  0 7 0  6 8 2
0 9 1  0 2 0  4 0 7
0 0 8  5 0 4  0 3 0
'

'
0 0 7  0 3 2  8 0 0
8 3 0  0 6 0  0 1 5
5 0 0  0 4 0  0 7 0

0 0 9  0 1 6  0 0 0
2 6 0  0 0 4  3 9 1
0 4 3  0 5 9  7 8 6

4 0 0  8 0 1  9 3 7
0 0 1  6 7 0  0 0 8
0 0 8  0 0 0  0 6 2
'

'
0 4 0  0 0 6  2 3 7
3 0 2  0 9 0  0 0 1
1 0 0  3 2 0  4 8 0

7 0 1  6 0 0  9 4 0
5 0 3  0 0 9  0 2 8
4 2 0  8 7 3  1 5 0

6 9 0  2 0 5  0 1 4
0 0 5  7 3 4  6 0 0
0 3 0  0 0 0  0 0 5
'


'
8 0 0  0 0 1  0 0 2
0 1 4  0 5 7  0 0 6
0 0 0  0 0 0  0 0 4

0 3 0  5 0 0  0 1 0
7 5 8  0 0 0  0 0 0
0 0 0  0 7 0  9 6 5

2 4 0  6 0 0  0 0 0
9 0 3  7 0 0  0 2 0
0 0 5  0 9 2  4 0 0
'

'
3 0 6  0 0 7  0 0 2
0 0 4  0 0 5  0 8 0
0 8 0  6 0 0  7 0 0

0 0 9  0 5 4  0 1 0
1 0 0  0 0 0  3 5 0
0 6 0  0 8 0  2 0 9

0 0 0  0 0 0  0 0 8
0 1 0  0 6 2  0 4 0
5 0 2  7 9 8  0 0 3
'
)
]

{ #category : #'private - helpers' }
NikoliWay >> blankCell [ 

	^0
]

{ #category : #initialization }
NikoliWay >> initialize [

	relatedVertBlocks := Dictionary new.
	relatedVertBlocks
		at: 1 put: #( 4 7 );
		at: 4 put: #( 1 7 );
		at: 7 put: #( 1 4 );
		at: 2 put: #( 5 8 );
		at: 5 put: #( 2 8 );
		at: 8 put: #( 2 5 );
		at: 3 put: #( 6 9 );
		at: 6 put: #( 3 9 );
		at: 9 put: #( 3 6 ).

	relatedHorBlocks := Dictionary new.
	relatedHorBlocks
		at: 1 put: #( 2 3 );
		at: 2 put: #( 1 3 );
		at: 3 put: #( 1 2 );
		at: 4 put: #( 5 6 );
		at: 5 put: #( 4 6 );
		at: 6 put: #( 4 5 );
		at: 7 put: #( 8 9 );
		at: 8 put: #( 7 9 );
		at: 9 put: #( 7 8 )
]

{ #category : #exercises }
NikoliWay >> intermediateEx [

	^ #(
'
0 0 0 0 5 0 0 0 0
0 0 0 7 0 2 1 3 0
5 0 6 0 0 4 0 0 0

0 0 8 0 0 0 0 1 0
3 4 9 0 0 0 0 7 0
7 0 0 0 0 6 0 2 0

0 0 0 0 8 0 2 0 0
8 0 2 0 0 0 4 0 0
0 0 0 3 0 0 0 5 0
'

'
 0 9 0   0 1 3   0 2 0 
 7 0 0   2 0 0   0 0 6 
 3 0 0   9 0 0   0 0 7 
 
 6 5 0   0 0 0   0 0 0 
 0 0 3   0 0 0   0 1 0 
 0 8 0   5 9 0   0 0 0 
 
 0 0 0   0 5 7   0 0 3 
 0 0 0   0 0 0   0 0 0 
 0 0 0   3 6 0   9 0 4 
 
'

'
 0 6 0   0 3 0   0 0 5 
 0 0 0   1 0 0   7 0 0 
 4 5 0   0 0 0   0 0 0 
 
 5 0 2   0 0 0   0 0 0 
 8 0 0   6 0 3   0 2 9 
 0 0 7   0 9 0   0 0 0 
 
 0 0 0   0 0 6   0 0 0 
 0 0 6   4 0 0   0 3 0 
 0 0 0   7 0 0   4 9 0 
'
'
 3 0 0   0 0 0   2 0 8 
 8 0 0   0 6 9   0 0 0 
 4 0 0   0 5 0   0 0 0 
 
 0 0 0   7 0 0   0 5 0 
 0 0 0   0 0 8   6 0 0 
 0 5 0   0 0 2   4 0 0 
 
 0 0 0   9 1 0   0 2 0 
 0 8 0   0 0 6   0 0 7 
 0 0 3   0 0 0   0 0 0 
'

'
 0 3 0   0 0 0   4 8 9 
 1 0 8   0 0 4   0 7 0 
 0 0 0   0 6 0   0 0 0 
 
 0 0 0   0 0 0   0 0 0 
 0 0 0   0 3 0   0 0 1 
 7 2 6   0 0 0   0 3 0 
 
 0 0 0   7 0 2   1 0 0 
 4 9 0   0 0 0   0 0 0 
 0 0 0   0 0 5   2 0 0 
 
'

'

 6 0 7   0 0 0   0 4 0 
 0 0 0   0 0 1   0 0 0 
 0 0 0   0 0 0   7 0 5 
 
 0 7 3   4 0 0   0 0 9 
 0 6 0   0 2 0   0 1 0 
 9 0 0   0 0 8   0 0 4 
 
 5 0 0   0 0 0   0 0 0 
 0 0 0   3 9 6   0 0 0 
 0 3 4   7 0 0   0 0 0 
 
'

'
 0 4 0   0 0 0   0 8 0 
 0 0 1   0 0 5   0 0 0 
 0 0 0   0 4 3   6 0 0 
 
 0 0 0   2 7 0   0 0 3 
 0 0 6   0 0 0   0 0 9 
 7 0 0   0 0 4   0 0 0 
 
 0 0 5   0 0 8   0 0 6 
 0 0 0   0 3 0   0 7 0 
 8 1 0   0 0 9   3 0 4 
 
'

'
 0 0 0   1 0 0   6 0 0 
 2 0 0   0 9 0   0 0 1 
 0 5 0   8 0 0   0 3 0 
 
 0 1 7   0 0 0   0 0 0 
 0 0 5   4 0 0   9 0 8 
 0 0 0   0 6 0   0 0 0 
 
 7 0 0   0 1 2   8 0 0 
 8 0 0   9 0 0   3 0 0 
 0 3 0   0 0 4   0 0 0 
'

'
 9 0 0   0 5 0   0 0 8 
 8 0 0   0 0 7   3 0 0 
 2 0 5   0 0 4   0 0 0 
 
 0 0 0   0 0 0   0 4 9 
 0 0 0   0 0 1   0 0 0 
 0 0 6   4 0 0   0 0 2 
 
 0 9 0   0 0 0   0 6 0 
 0 0 4   0 0 0   0 2 7 
 5 0 0   2 9 0   0 0 0 
'

'
 0 0 0   0 0 7   6 0 8 
 2 0 0   5 0 0   0 0 0 
 0 7 5   0 0 4   0 0 0 
 
 0 2 0   0 8 3   0 0 4 
 9 0 6   0 0 0   0 0 0 
 0 0 0   0 5 0   0 9 2 
 
 0 0 0   0 0 0   0 3 0 
 0 4 0   1 7 2   0 0 0 
 0 0 9   0 0 0   0 4 0 
'

'
 0 2 0   0 9 6   0 5 0 
 0 0 0   0 0 0   0 0 0 
 7 6 3   0 4 0   0 0 9 
 
 2 0 0   0 0 0   0 0 0 
 8 0 0   7 0 0   2 0 0 
 0 0 9   0 0 0   3 0 7 
 
 1 0 0   0 0 0   0 0 4 
 0 0 0   0 0 8   0 0 0 
 0 0 0   1 3 5   0 0 6 
'

'
 0 0 9   3 0 7   0 0 1 
 1 0 6   0 0 0   9 0 0 
 0 3 0   0 0 0   5 0 0 
 
 0 2 3   4 6 0   0 9 0 
 0 0 0   0 0 0   0 4 0 
 0 0 0   0 0 0   7 0 8 
 
 0 8 0   0 5 0   0 0 0 
 2 0 0   0 0 1   8 0 0 
 4 9 5   0 0 0   0 0 0 
'

'
 0 7 0   5 9 0   0 0 8 
 0 6 0   0 7 0   0 0 5 
 0 0 8   0 0 0   0 7 0 
 
 0 3 0   4 0 0   0 9 7 
 5 0 0   0 0 0   3 0 0 
 0 0 1   0 0 3   0 5 0 
 
 0 0 0   0 2 0   0 0 0 
 0 9 0   0 0 0   2 0 4 
 2 0 0   0 0 7   0 0 1 
'

'
 0 0 0   2 0 0   0 6 0 
 0 0 0   3 0 0   0 0 9 
 0 1 6   0 0 0   7 0 0 
 
 0 0 0   0 4 1   0 0 0 
 0 0 7   0 0 0   9 1 0 
 9 0 0   0 8 0   0 5 0 
 
 0 0 2   0 0 0   0 0 4 
 7 3 0   0 0 4   5 0 0 
 4 0 0   0 0 0   0 0 8 
'

"No. 15  2024-05-16 問題 5"
'
 0 0 0   0 8 0   6 0 4
 4 5 0   0 0 0   0 8 0
 8 0 0   0 0 0   0 0 0

 0 0 0   2 0 0   3 9 0
 0 0 0   3 6 5   0 0 0
 1 0 0   0 0 7   0 0 0

 0 0 0   5 0 2   7 0 0
 0 0 0   0 4 0   0 0 5
 0 4 6   0 0 1   0 0 0
'
"No. 16 2024-05-16 問題 6"
'
 0 0 0   1 0 6   0 2 3
 0 8 5   0 0 0   0 0 0
 0 0 0   7 0 0   0 0 0

 0 0 6   0 0 7   2 0 1
 0 0 7   0 0 4   0 5 0
 0 0 0   0 0 0   6 0 4

 1 0 0   0 3 0   0 0 8
 0 0 0   0 5 9   0 0 0
 3 0 0   0 0 0   0 0 0
'

"X- No.17 2024-05-15問題 5 -X"
'
 0 0 0   0 0 0   0 8 0
 0 1 0   8 0 0   2 0 4
 0 0 8   0 4 0   7 0 0 

 0 0 1   0 9 0   0 5 0
 0 0 0   0 0 0   8 0 0
 0 2 0   0 3 0   0 0 1

 0 7 9   0 0 5   6 0 0
 0 0 0   0 0 9   0 4 0
 3 4 0   6 0 7   5 0 0
'

" No.18 2024-05-15問題 6"
'
 0 4 0   0 0 6   0 0 2
 0 0 0   0 0 3   5 6 0
 0 0 8   0 0 2   0 0 0

 6 5 0   0 0 0   0 0 1
 2 0 0   9 0 0   0 0 3
 0 1 0   0 0 0   0 0 7

 7 9 0   0 5 0   0 1 0
 0 0 0   0 6 0   9 0 0
 0 0 0   3 4 0   8 0 0
'
"No.19 2024-05-17問題 5"
'
 0 0 0   0 0 0   4 8 3
 6 7 0   0 0 0   0 0 0
 0 0 0   0 0 1   0 0 0

 0 8 0   0 0 4   9 0 0
 1 0 0   0 9 0   0 0 5
 0 0 4   5 3 0   0 6 0
 
 0 0 0   0 0 0   3 1 0
 0 3 0   7 0 0   0 0 0
 2 0 6   8 5 0   0 0 0
'

"No.20 2024-05-17問題 6"
'
 0 0 6   0 0 0   0 7 1
 2 0 1   0 0 0   0 0 0
 0 0 9   0 0 0   8 3 6

 5 0 0   3 8 9   0 0 0
 0 0 4   0 0 0   0 0 0 
 0 0 0   0 0 7   0 6 0

 4 0 8   2 0 6   9 0 0
 0 0 0   0 0 3   0 0 0
 3 1 0   0 0 5   0 0 0
'

"No.21 2024-05-18問題 5"
'
 0 2 5   3 0 0   0 0 0
 6 0 0   0 0 5   0 0 1
 0 0 0   9 0 0   6 0 0

 0 0 4   1 0 0   0 0 5
 0 1 0   8 0 0   0 9 0
 7 0 2   0 0 0   0 4 0

 0 0 0   5 0 8   2 0 4
 0 0 0   7 0 0   0 1 0
 0 0 0   0 2 0   9 0 0
'

"No.22 2024-05-18問題 6"
'
 3 0 0   0 0 0   0 0 9
 0 0 4   0 0 8   0 7 6
 7 0 0   6 0 3   0 8 0

 5 0 0   0 8 0   0 0 3
 0 0 0   0 0 9   0 0 4
 4 9 0   7 0 0   0 5 0

 9 1 0   0 0 0   0 0 0
 0 0 0   0 4 7   0 0 0
 0 0 0   0 0 0   0 1 8
'

"No.23 2024-05-19問題 5"
'
 0 0 0   1 2 7   0 3 0
 7 5 0   0 0 0   0 0 0
 0 0 0   3 0 0   6 0 0

 6 7 0   0 0 2   0 0 4
 0 0 9   0 0 1   0 0 5
 0 0 0   0 0 0   3 0 0

 0 9 4   0 0 0   2 0 0
 0 2 0   0 0 8   0 6 0
 0 0 5   0 9 0   0 0 1
'

"No.24 2024-05-19問題 6"
'
 0 0 0   0 6 0   0 0 9
 0 0 2   0 0 1   0 8 0
 0 4 0   2 0 0   0 0 0

 4 0 0   0 9 0   0 5 0
 0 0 0   8 0 0   9 1 3
 0 7 0   0 0 6   0 0 0 

 2 0 0   7 0 0   0 4 1
 0 5 3   0 0 4   0 0 6
 0 9 0   0 0 0   0 0 0
'

"No.25 2024-05-20問題 5"
'
 0 0 0   3 0 0   0 7 0
 6 0 0   0 0 0   0 9 8
 0 0 5   6 0 0   0 0 0

 0 0 4   0 2 0   0 8 0
 0 0 0   1 0 0   9 5 0
 0 3 2   0 0 0   4 0 1

 8 0 0   5 7 0   0 0 0
 0 0 1   0 0 0   0 0 0
 0 0 0   0 0 4   0 3 0
'

"No.26 2024-05-20問題 6"
'
 1 0 0   0 0 0   0 4 0
 8 0 9   3 4 0   0 0 0
 0 6 0   0 5 0   0 0 0

 0 0 0   0 1 0   0 6 0
 0 0 0   0 2 5   0 0 0
 0 8 5   0 0 0   3 0 0

 7 0 0   0 0 0   2 0 3
 0 0 0   0 0 0   7 0 0
 4 0 1   0 8 0   0 0 0
'

"No.27 2024-05-21問題 5"
'
 0 0 0   3 0 7   5 0 0
 0 2 0   0 0 0   0 0 0
 0 0 0   0 0 6   0 0 0

 0 3 0   0 0 5   0 4 0
 7 0 0   0 1 0   3 0 6
 1 9 6   0 0 8   0 0 0

 4 0 0   0 0 0   7 0 0
 0 5 9   8 0 0   0 0 0
 6 0 2   0 0 4   0 0 1
'

"No.28 2024-05-21問題 6"
'
 0 8 4   9 0 0   0 5 2
 3 0 0   6 0 0   0 0 0
 0 0 2   3 0 0   0 1 0

 0 6 0   0 0 3   7 0 0
 9 0 0   0 0 0   5 0 0
 0 0 0   1 0 0   0 6 0
 
 0 0 0   0 0 0   0 0 0
 7 0 0   0 5 0   2 0 8
 0 1 0   0 0 0   0 0 7
'
)
]

{ #category : #'sudoku - solution' }
NikoliWay >> solve: task [

	sudokuBoard := SudokuBoard2 new.
	sudokuBoard loadFromString: task.

	5 timesRepeat: [ 
		self class subclasses do: [ :subclass |  | solution |
			solution := subclass new: sudokuBoard .
			solution solve.	
		]	
	].

	^ sudokuBoard completed

	
"

nikoliWay := NikoliWay new.
tasks :=  nikoliWay intermediateEx     .
completed := 0.
uncompleted := OrderedCollection new.
tasks doWithIndex:  [ :task :i| 
	(nikoliWay solve: task) 
	ifTrue: [ completed := completed + 1]
	ifFalse: [ uncompleted add: i ].
].

Transcript show: 'i solved  '; show: completed ; show: ' out of '; show: tasks size ; show: ' tasks.';cr.
(completed  = tasks size ) ifFalse: [  
	Transcript show: 'uncompleted tasks: '; show: uncompleted.
].

"
]

{ #category : #accessing }
NikoliWay >> sudokuBoard [

	^sudokuBoard 
]

{ #category : #accessing }
NikoliWay >> sudokuBoard: aBoard [

	sudokuBoard := aBoard 
]

{ #category : #creation }
NikoliWay >> sudokuColumnAt: colIndex [

	^ SudokuColumn new: colIndex column: (sudokuBoard atColumn: colIndex) 
	
]

{ #category : #accessing }
NikoliWay >> sudokuRowAt: rowIndex [

	^SudokuRow new: rowIndex row: (sudokuBoard atRow: rowIndex)
]

{ #category : #accessing }
NikoliWay >> tsumo: cell [

	cell class = SudokuCell 
	ifTrue: [ sudokuBoard map: cell ]
]
